extend type Query {
  products: [Product!]!
  product(id: ID!): Product
}

extend type Mutation {
  createProduct(input: ProductInput!): ProductSimple!
  updateProduct(id: ID!, input: ProductInput!): ProductSimple!
  deleteProduct(id: ID!): ID!
}

input ProductInput {
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  price: Float!
  productCategoryId: ID!
  companyId: ID!
  features: [ID!]
}

interface IProduct {
  id: ID!
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  price: Float!
  count: Int!
  productCategoryId: ID!
  companyId: ID!
  createdAt: String!
  updatedAt: String!
}

type ProductSimple implements IProduct {
  id: ID!
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  price: Float!
  count: Int!
  productCategoryId: ID!
  companyId: ID!
  createdAt: String!
  updatedAt: String!
}

type Product implements IProduct {
  id: ID!
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  price: Float!
  count: Int!
  productCategoryId: ID!
  companyId: ID!
  createdAt: String!
  updatedAt: String!
  company: Company
  productCategory: ProductCategory
  features: [Feature!]!
  discounts: [Discount!]!
  orderProducts: [OrderProduct!]!
  productProcurements: [ProductProcurement!]!
}
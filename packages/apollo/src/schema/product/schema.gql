extend type Query {
  products: [Product!]!
  productsByIds(productIds: [ID!]!): [Product]!
  productsByCategory(categoryIdSlug: ID!): [Product!]!
  product(id: ID!): Product
}

extend type Mutation {
  createProduct(input: ProductInput!): ProductSimple!
  updateProduct(id: ID!, input: ProductInput!): ProductSimple!
  deleteProduct(id: ID!): ID!
  syncAllProductsCount: Boolean
}

input ProductFeatureInput {
  featureId: ID!
  endTime: String
}

input ProductInput {
  barcode: String
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  price: Int!
  productCategoryId: ID!
  companyId: ID!
  weight: Int!
  features: [ProductFeatureInput!]
}

interface IProduct {
  id: ID!
  barcode: String
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  weight: Int!
  price: Int!
  count: Int!
  productCategoryId: ID!
  companyId: ID!
  createdAt: Date!
  updatedAt: Date!
}

type ProductSimple implements IProduct {
  id: ID!
  barcode: String
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  weight: Int!
  price: Int!
  count: Int!
  productCategoryId: ID!
  companyId: ID!
  createdAt: Date!
  updatedAt: Date!
}

type Product implements IProduct {
  id: ID!
  barcode: String
  name: String!
  slug: String!
  description: String!
  imageUrl: String!
  weight: Int!
  price: Int!
  count: Int!
  productCategoryId: ID!
  companyId: ID!
  createdAt: Date!
  updatedAt: Date!
  waitingCount: Int! # количество продукта, ожидаемое от ближайших поставок
  company: Company
  productCategory: ProductCategory
  features: [Feature!]!
  discounts: [Discount!]!
  orderProducts: [OrderProduct!]!
  productProcurements: [ProductProcurement!]!
  productFeatures: [ProductFeature!]!
}
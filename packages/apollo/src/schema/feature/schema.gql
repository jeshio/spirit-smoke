extend type Query {
  features: [Feature!]!
  feature(id: ID!): Feature
}

extend type Mutation {
  createFeature(input: FeatureInput!): FeatureSimple!
  addProductCategoryFeature(featureId: ID!, productCategoryId: ID!): Feature!
  addProductFeature(featureId: ID!, productId: ID!): Feature!
  deleteFeature(id: ID!): ID!
}

input FeatureInput {
  name: String!
  slug: String!
  imageUrl: String!
  isDisabled: Boolean
}

interface IFeature {
  id: ID!
  name: String!
  slug: String!
  imageUrl: String!
  isDisabled: Boolean!
  createdAt: String!
  updatedAt: String!
}

type FeatureSimple implements IFeature {
  id: ID!
  name: String!
  slug: String!
  imageUrl: String!
  isDisabled: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Feature implements IFeature {
  id: ID!
  name: String!
  slug: String!
  imageUrl: String!
  isDisabled: Boolean!
  createdAt: String!
  updatedAt: String!
  productCategories: [ProductCategory!]!
  products: [Product!]!
  discounts: [Discount!]!
} 
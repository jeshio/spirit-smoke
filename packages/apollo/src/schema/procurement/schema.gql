extend type Query {
  procurements(status: ProcurementStatus): [Procurement!]!
  procurement(id: ID!): Procurement
}

extend type Mutation {
  createProcurement(input: ProcurementInput!): ProcurementSimple!
  updateProcurement(id: ID!, input: ProcurementInput!): ProcurementSimple!
  checkProcurementProducts(id: ID!, input: ProcurementCheckProductsInput): ProcurementSimple!
  addProcurementProduct(procurementId: ID!, input: AddProcurementProductInput!): ProcurementSimple!
}

input ProcurementInput {
  nextStatusDate: Date
  deliveryCost: Float!
  status: ProcurementStatus!
  name: String!
  comment: String
  providerInfo: String
  products: [ProcurementProductInput!]!
}

input ProcurementCheckProductsInput {
  products: [ProcurementProductInput!]!
}

input ProcurementProductInput {
  id: ID!
  count: Int!
  costs: Int!
}

input AddProcurementProductInput {
  id: ID!
  count: Int!
  costs: Int
}

enum ProcurementStatus {
  BUILDING
  NOT_CONFIRMED
  CONFIRMED
  CANCELED
  SENT
  FAILURE
  SUCCESS
}

type ProductProcurement {
  count: Int!
  costs: Float!
  procurement: Procurement!
  product: Product!
}

interface IProcurement {
  id: ID!
  name: String!
  comment: String
  providerInfo: String!
  status: ProcurementStatus!
  nextStatusDate: Date
  deliveryCost: Float
  weight: Int!
} 

type ProcurementSimple implements IProcurement {
  id: ID!
  name: String!
  comment: String
  providerInfo: String!
  status: ProcurementStatus!
  nextStatusDate: Date
  deliveryCost: Float
  weight: Int!
} 

type Procurement implements IProcurement {
  id: ID!
  name: String!
  comment: String
  providerInfo: String!
  status: ProcurementStatus!
  nextStatusDate: Date
  productsPrice: Float!
  totalPrice: Float!
  saleAmount: Float!
  margin: Float!
  deliveryCost: Float
  weight: Int!
  productProcurements: [ProductProcurement!]!
} 
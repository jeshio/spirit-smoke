extend type Query {
  procurements: [Procurement!]!
  procurement(id: ID!): Procurement
}

extend type Mutation {
  createProcurement(input: ProcurementInput!): ProcurementSimple!
  updateProcurement(id: ID!, input: ProcurementInput!): ProcurementSimple!
  addProductProcurement(input: ProductProcurementInput): ProcurementSimple!
}

input ProductProcurementInput {
  productId: ID!
  procurementId: ID!
  count: Int!
  costs: Int!
}

input ProcurementInput {
  nextStatusDate: String
  deliveryCost: Float!
  status: ProcurementStatus!
  products: [ProcurementProductInput!]!
}

input ProcurementProductInput {
  id: ID!
  count: Int!
  costs: Int!
}

enum ProcurementStatus {
  BUILDING
  NOT_CONFIRMED
  CONFIRMED
  CANCELED
  SENT
  FAILURE
  SUCCESS
}

type ProductProcurement {
  count: Int!
  costs: Float!
  procurement: Procurement!
  product: Product!
}

interface IProcurement {
  id: ID!
  status: ProcurementStatus!
  nextStatusDate: String # TODO: доработать дату
  deliveryCost: Float
} 

type ProcurementSimple implements IProcurement {
  id: ID!
  status: ProcurementStatus!
  nextStatusDate: String
  deliveryCost: Float
} 

type Procurement implements IProcurement {
  id: ID!
  status: ProcurementStatus!
  nextStatusDate: String
  deliveryCost: Float
  productProcurements: [ProductProcurement!]!
} 
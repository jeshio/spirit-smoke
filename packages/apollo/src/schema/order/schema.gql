extend type Query {
  orders: [Order!]!
  order(id: ID!): Order
}

extend type Mutation {
  createOrder(input: OrderInput!): OrderSimple!
  updateOrder(id: ID!, input: OrderInput!): OrderSimple!
}

input OrderInput {
  address: String!
  intercomCode: String
  personsCount: Int
  comment: String
  ourComment: String
  deliveryTime: Date!
  phoneNumber: String!
  products: [OrderProductInput!]!
  status: OrderStatus
}

enum OrderStatus {
  NOT_CONFIRMED 
  CONFIRMED 
  CANCELED 
  SENT 
  FAILURE 
  SUCCESS
}

input OrderProductInput {
  id: ID!
  productsCount: Int!
}

type OrderProduct {
  productsCount: Int!
  product: Product!
  order: Order!
}

interface IOrder {
  id: ID!
  address: String!
  status: OrderStatus!
  intercomCode: String
  personsCount: Int
  comment: String
  ourComment: String
  deliveryTime: Date!
  phoneNumber: String!
  createdAt: Date!
  updatedAt: Date!
}

type OrderSimple implements IOrder {
  id: ID!
  address: String!
  status: OrderStatus!
  intercomCode: String
  personsCount: Int
  comment: String
  ourComment: String
  deliveryTime: Date!
  phoneNumber: String!
  createdAt: Date!
  updatedAt: Date!
}

type Order implements IOrder {
  id: ID!
  address: String!
  status: OrderStatus!
  intercomCode: String
  personsCount: Int
  comment: String
  ourComment: String
  deliveryTime: Date!
  phoneNumber: String!
  createdAt: Date!
  updatedAt: Date!
  totalPrice: Int!
  discounts: [Discount!]!
  bonuses: [Bonus!]!
  orderProducts: [OrderProduct!]!
}